#pragma kernel InitBoundingBoxBuffer
#pragma kernel FindBoundingBox

// count set up for one thread per pixel
// on a POT rendertexture a multiple of 32*32 in size
#define THREAD_COUNT 32
#define MAX_INT 2147483647
#define FLOAT_COLOR_TOLERANCE 0.0001

uniform float4 colorKeyValue;
Texture2D<float4> colorKeyMap; // read-only
RWStructuredBuffer<uint4> boundsBuffer; // xyzw == x-min, y-min, x-max, y-max

[numthreads(1, 1, 1)]
void InitBoundingBoxBuffer(uint3 id : SV_DispatchThreadID)
{
	boundsBuffer[0].x = MAX_INT;
	boundsBuffer[0].y = MAX_INT;
	boundsBuffer[0].z = 0;
	boundsBuffer[0].w = 0;
}

[numthreads(THREAD_COUNT, THREAD_COUNT, 1)]
void FindBoundingBox(uint3 id : SV_DispatchThreadID)
{
	if (abs(colorKeyMap[id.xy].r - colorKeyValue.r) < FLOAT_COLOR_TOLERANCE &&
		abs(colorKeyMap[id.xy].g - colorKeyValue.g) < FLOAT_COLOR_TOLERANCE &&
		abs(colorKeyMap[id.xy].b - colorKeyValue.b) < FLOAT_COLOR_TOLERANCE &&
		abs(colorKeyMap[id.xy].a - colorKeyValue.a) < FLOAT_COLOR_TOLERANCE)
	{
		InterlockedMin(boundsBuffer[0].x, id.x); // x-min
		InterlockedMin(boundsBuffer[0].y, id.y); // y-min
		InterlockedMax(boundsBuffer[0].z, id.x); // x-max
		InterlockedMax(boundsBuffer[0].w, id.y); // y-max
	}
}